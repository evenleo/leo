// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: args.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_args_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_args_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_args_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_args_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_args_2eproto;
namespace leo {
class KvCommnad;
class KvCommnadDefaultTypeInternal;
extern KvCommnadDefaultTypeInternal _KvCommnad_default_instance_;
class KvCommnadReply;
class KvCommnadReplyDefaultTypeInternal;
extern KvCommnadReplyDefaultTypeInternal _KvCommnadReply_default_instance_;
class LogEntry;
class LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class RequestAppendArgs;
class RequestAppendArgsDefaultTypeInternal;
extern RequestAppendArgsDefaultTypeInternal _RequestAppendArgs_default_instance_;
class RequestAppendReply;
class RequestAppendReplyDefaultTypeInternal;
extern RequestAppendReplyDefaultTypeInternal _RequestAppendReply_default_instance_;
class RequestVoteArgs;
class RequestVoteArgsDefaultTypeInternal;
extern RequestVoteArgsDefaultTypeInternal _RequestVoteArgs_default_instance_;
class RequestVoteReply;
class RequestVoteReplyDefaultTypeInternal;
extern RequestVoteReplyDefaultTypeInternal _RequestVoteReply_default_instance_;
}  // namespace leo
PROTOBUF_NAMESPACE_OPEN
template<> ::leo::KvCommnad* Arena::CreateMaybeMessage<::leo::KvCommnad>(Arena*);
template<> ::leo::KvCommnadReply* Arena::CreateMaybeMessage<::leo::KvCommnadReply>(Arena*);
template<> ::leo::LogEntry* Arena::CreateMaybeMessage<::leo::LogEntry>(Arena*);
template<> ::leo::RequestAppendArgs* Arena::CreateMaybeMessage<::leo::RequestAppendArgs>(Arena*);
template<> ::leo::RequestAppendReply* Arena::CreateMaybeMessage<::leo::RequestAppendReply>(Arena*);
template<> ::leo::RequestVoteArgs* Arena::CreateMaybeMessage<::leo::RequestVoteArgs>(Arena*);
template<> ::leo::RequestVoteReply* Arena::CreateMaybeMessage<::leo::RequestVoteReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace leo {

// ===================================================================

class RequestVoteArgs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:leo.RequestVoteArgs) */ {
 public:
  RequestVoteArgs();
  virtual ~RequestVoteArgs();

  RequestVoteArgs(const RequestVoteArgs& from);
  RequestVoteArgs(RequestVoteArgs&& from) noexcept
    : RequestVoteArgs() {
    *this = ::std::move(from);
  }

  inline RequestVoteArgs& operator=(const RequestVoteArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteArgs& operator=(RequestVoteArgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteArgs* internal_default_instance() {
    return reinterpret_cast<const RequestVoteArgs*>(
               &_RequestVoteArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RequestVoteArgs* other);
  friend void swap(RequestVoteArgs& a, RequestVoteArgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteArgs* New() const final {
    return CreateMaybeMessage<RequestVoteArgs>(nullptr);
  }

  RequestVoteArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteArgs& from);
  void MergeFrom(const RequestVoteArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "leo.RequestVoteArgs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_args_2eproto);
    return ::descriptor_table_args_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required int32 candidate_id = 2;
  bool has_candidate_id() const;
  void clear_candidate_id();
  static const int kCandidateIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 candidate_id() const;
  void set_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required uint32 last_log_index = 3;
  bool has_last_log_index() const;
  void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_log_index() const;
  void set_last_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 last_log_term = 4;
  bool has_last_log_term() const;
  void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_log_term() const;
  void set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:leo.RequestVoteArgs)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  ::PROTOBUF_NAMESPACE_ID::int32 candidate_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_log_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_log_term_;
  friend struct ::TableStruct_args_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:leo.RequestVoteReply) */ {
 public:
  RequestVoteReply();
  virtual ~RequestVoteReply();

  RequestVoteReply(const RequestVoteReply& from);
  RequestVoteReply(RequestVoteReply&& from) noexcept
    : RequestVoteReply() {
    *this = ::std::move(from);
  }

  inline RequestVoteReply& operator=(const RequestVoteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteReply& operator=(RequestVoteReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteReply* internal_default_instance() {
    return reinterpret_cast<const RequestVoteReply*>(
               &_RequestVoteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RequestVoteReply* other);
  friend void swap(RequestVoteReply& a, RequestVoteReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteReply* New() const final {
    return CreateMaybeMessage<RequestVoteReply>(nullptr);
  }

  RequestVoteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteReply& from);
  void MergeFrom(const RequestVoteReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "leo.RequestVoteReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_args_2eproto);
    return ::descriptor_table_args_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required bool vote_granted = 2;
  bool has_vote_granted() const;
  void clear_vote_granted();
  static const int kVoteGrantedFieldNumber = 2;
  bool vote_granted() const;
  void set_vote_granted(bool value);

  // @@protoc_insertion_point(class_scope:leo.RequestVoteReply)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  bool vote_granted_;
  friend struct ::TableStruct_args_2eproto;
};
// -------------------------------------------------------------------

class LogEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:leo.LogEntry) */ {
 public:
  LogEntry();
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LogEntry* other);
  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogEntry* New() const final {
    return CreateMaybeMessage<LogEntry>(nullptr);
  }

  LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "leo.LogEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_args_2eproto);
    return ::descriptor_table_args_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes command = 3;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 3;
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const void* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);

  // required uint32 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 index = 2;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:leo.LogEntry)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  friend struct ::TableStruct_args_2eproto;
};
// -------------------------------------------------------------------

class RequestAppendArgs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:leo.RequestAppendArgs) */ {
 public:
  RequestAppendArgs();
  virtual ~RequestAppendArgs();

  RequestAppendArgs(const RequestAppendArgs& from);
  RequestAppendArgs(RequestAppendArgs&& from) noexcept
    : RequestAppendArgs() {
    *this = ::std::move(from);
  }

  inline RequestAppendArgs& operator=(const RequestAppendArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestAppendArgs& operator=(RequestAppendArgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestAppendArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestAppendArgs* internal_default_instance() {
    return reinterpret_cast<const RequestAppendArgs*>(
               &_RequestAppendArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RequestAppendArgs* other);
  friend void swap(RequestAppendArgs& a, RequestAppendArgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestAppendArgs* New() const final {
    return CreateMaybeMessage<RequestAppendArgs>(nullptr);
  }

  RequestAppendArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestAppendArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestAppendArgs& from);
  void MergeFrom(const RequestAppendArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestAppendArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "leo.RequestAppendArgs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_args_2eproto);
    return ::descriptor_table_args_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .leo.LogEntry entries = 6;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 6;
  ::leo::LogEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::leo::LogEntry >*
      mutable_entries();
  const ::leo::LogEntry& entries(int index) const;
  ::leo::LogEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::leo::LogEntry >&
      entries() const;

  // required uint32 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required int32 leader_id = 2;
  bool has_leader_id() const;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 leader_id() const;
  void set_leader_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required uint32 prev_log_index = 3;
  bool has_prev_log_index() const;
  void clear_prev_log_index();
  static const int kPrevLogIndexFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 prev_log_index() const;
  void set_prev_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 prev_log_term = 4;
  bool has_prev_log_term() const;
  void clear_prev_log_term();
  static const int kPrevLogTermFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 prev_log_term() const;
  void set_prev_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 leader_commit = 5;
  bool has_leader_commit() const;
  void clear_leader_commit();
  static const int kLeaderCommitFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 leader_commit() const;
  void set_leader_commit(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:leo.RequestAppendArgs)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::leo::LogEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  ::PROTOBUF_NAMESPACE_ID::int32 leader_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prev_log_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prev_log_term_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leader_commit_;
  friend struct ::TableStruct_args_2eproto;
};
// -------------------------------------------------------------------

class RequestAppendReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:leo.RequestAppendReply) */ {
 public:
  RequestAppendReply();
  virtual ~RequestAppendReply();

  RequestAppendReply(const RequestAppendReply& from);
  RequestAppendReply(RequestAppendReply&& from) noexcept
    : RequestAppendReply() {
    *this = ::std::move(from);
  }

  inline RequestAppendReply& operator=(const RequestAppendReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestAppendReply& operator=(RequestAppendReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestAppendReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestAppendReply* internal_default_instance() {
    return reinterpret_cast<const RequestAppendReply*>(
               &_RequestAppendReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RequestAppendReply* other);
  friend void swap(RequestAppendReply& a, RequestAppendReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestAppendReply* New() const final {
    return CreateMaybeMessage<RequestAppendReply>(nullptr);
  }

  RequestAppendReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestAppendReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestAppendReply& from);
  void MergeFrom(const RequestAppendReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestAppendReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "leo.RequestAppendReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_args_2eproto);
    return ::descriptor_table_args_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required bool success = 2;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:leo.RequestAppendReply)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  bool success_;
  friend struct ::TableStruct_args_2eproto;
};
// -------------------------------------------------------------------

class KvCommnad :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:leo.KvCommnad) */ {
 public:
  KvCommnad();
  virtual ~KvCommnad();

  KvCommnad(const KvCommnad& from);
  KvCommnad(KvCommnad&& from) noexcept
    : KvCommnad() {
    *this = ::std::move(from);
  }

  inline KvCommnad& operator=(const KvCommnad& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvCommnad& operator=(KvCommnad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KvCommnad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KvCommnad* internal_default_instance() {
    return reinterpret_cast<const KvCommnad*>(
               &_KvCommnad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(KvCommnad* other);
  friend void swap(KvCommnad& a, KvCommnad& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KvCommnad* New() const final {
    return CreateMaybeMessage<KvCommnad>(nullptr);
  }

  KvCommnad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KvCommnad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KvCommnad& from);
  void MergeFrom(const KvCommnad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvCommnad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "leo.KvCommnad";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_args_2eproto);
    return ::descriptor_table_args_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string operation = 1;
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  const std::string& operation() const;
  void set_operation(const std::string& value);
  void set_operation(std::string&& value);
  void set_operation(const char* value);
  void set_operation(const char* value, size_t size);
  std::string* mutable_operation();
  std::string* release_operation();
  void set_allocated_operation(std::string* operation);

  // required string key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // optional string value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // required int64 cid = 4;
  bool has_cid() const;
  void clear_cid();
  static const int kCidFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 cid() const;
  void set_cid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required uint32 seq = 5;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:leo.KvCommnad)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int64 cid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  friend struct ::TableStruct_args_2eproto;
};
// -------------------------------------------------------------------

class KvCommnadReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:leo.KvCommnadReply) */ {
 public:
  KvCommnadReply();
  virtual ~KvCommnadReply();

  KvCommnadReply(const KvCommnadReply& from);
  KvCommnadReply(KvCommnadReply&& from) noexcept
    : KvCommnadReply() {
    *this = ::std::move(from);
  }

  inline KvCommnadReply& operator=(const KvCommnadReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvCommnadReply& operator=(KvCommnadReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KvCommnadReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KvCommnadReply* internal_default_instance() {
    return reinterpret_cast<const KvCommnadReply*>(
               &_KvCommnadReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(KvCommnadReply* other);
  friend void swap(KvCommnadReply& a, KvCommnadReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KvCommnadReply* New() const final {
    return CreateMaybeMessage<KvCommnadReply>(nullptr);
  }

  KvCommnadReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KvCommnadReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KvCommnadReply& from);
  void MergeFrom(const KvCommnadReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvCommnadReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "leo.KvCommnadReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_args_2eproto);
    return ::descriptor_table_args_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);

  // optional string value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // required bool leader = 1;
  bool has_leader() const;
  void clear_leader();
  static const int kLeaderFieldNumber = 1;
  bool leader() const;
  void set_leader(bool value);

  // @@protoc_insertion_point(class_scope:leo.KvCommnadReply)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool leader_;
  friend struct ::TableStruct_args_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestVoteArgs

// required uint32 term = 1;
inline bool RequestVoteArgs::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestVoteArgs::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteArgs::term() const {
  // @@protoc_insertion_point(field_get:leo.RequestVoteArgs.term)
  return term_;
}
inline void RequestVoteArgs::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  term_ = value;
  // @@protoc_insertion_point(field_set:leo.RequestVoteArgs.term)
}

// required int32 candidate_id = 2;
inline bool RequestVoteArgs::has_candidate_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestVoteArgs::clear_candidate_id() {
  candidate_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteArgs::candidate_id() const {
  // @@protoc_insertion_point(field_get:leo.RequestVoteArgs.candidate_id)
  return candidate_id_;
}
inline void RequestVoteArgs::set_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  candidate_id_ = value;
  // @@protoc_insertion_point(field_set:leo.RequestVoteArgs.candidate_id)
}

// required uint32 last_log_index = 3;
inline bool RequestVoteArgs::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestVoteArgs::clear_last_log_index() {
  last_log_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteArgs::last_log_index() const {
  // @@protoc_insertion_point(field_get:leo.RequestVoteArgs.last_log_index)
  return last_log_index_;
}
inline void RequestVoteArgs::set_last_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:leo.RequestVoteArgs.last_log_index)
}

// required uint32 last_log_term = 4;
inline bool RequestVoteArgs::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestVoteArgs::clear_last_log_term() {
  last_log_term_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteArgs::last_log_term() const {
  // @@protoc_insertion_point(field_get:leo.RequestVoteArgs.last_log_term)
  return last_log_term_;
}
inline void RequestVoteArgs::set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  last_log_term_ = value;
  // @@protoc_insertion_point(field_set:leo.RequestVoteArgs.last_log_term)
}

// -------------------------------------------------------------------

// RequestVoteReply

// required uint32 term = 1;
inline bool RequestVoteReply::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestVoteReply::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteReply::term() const {
  // @@protoc_insertion_point(field_get:leo.RequestVoteReply.term)
  return term_;
}
inline void RequestVoteReply::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  term_ = value;
  // @@protoc_insertion_point(field_set:leo.RequestVoteReply.term)
}

// required bool vote_granted = 2;
inline bool RequestVoteReply::has_vote_granted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestVoteReply::clear_vote_granted() {
  vote_granted_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RequestVoteReply::vote_granted() const {
  // @@protoc_insertion_point(field_get:leo.RequestVoteReply.vote_granted)
  return vote_granted_;
}
inline void RequestVoteReply::set_vote_granted(bool value) {
  _has_bits_[0] |= 0x00000002u;
  vote_granted_ = value;
  // @@protoc_insertion_point(field_set:leo.RequestVoteReply.vote_granted)
}

// -------------------------------------------------------------------

// LogEntry

// required uint32 term = 1;
inline bool LogEntry::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogEntry::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogEntry::term() const {
  // @@protoc_insertion_point(field_get:leo.LogEntry.term)
  return term_;
}
inline void LogEntry::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  term_ = value;
  // @@protoc_insertion_point(field_set:leo.LogEntry.term)
}

// required uint32 index = 2;
inline bool LogEntry::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogEntry::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogEntry::index() const {
  // @@protoc_insertion_point(field_get:leo.LogEntry.index)
  return index_;
}
inline void LogEntry::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
  // @@protoc_insertion_point(field_set:leo.LogEntry.index)
}

// required bytes command = 3;
inline bool LogEntry::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogEntry::clear_command() {
  command_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogEntry::command() const {
  // @@protoc_insertion_point(field_get:leo.LogEntry.command)
  return command_.GetNoArena();
}
inline void LogEntry::set_command(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:leo.LogEntry.command)
}
inline void LogEntry::set_command(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  command_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:leo.LogEntry.command)
}
inline void LogEntry::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:leo.LogEntry.command)
}
inline void LogEntry::set_command(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:leo.LogEntry.command)
}
inline std::string* LogEntry::mutable_command() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:leo.LogEntry.command)
  return command_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogEntry::release_command() {
  // @@protoc_insertion_point(field_release:leo.LogEntry.command)
  if (!has_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return command_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  command_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:leo.LogEntry.command)
}

// -------------------------------------------------------------------

// RequestAppendArgs

// required uint32 term = 1;
inline bool RequestAppendArgs::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestAppendArgs::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestAppendArgs::term() const {
  // @@protoc_insertion_point(field_get:leo.RequestAppendArgs.term)
  return term_;
}
inline void RequestAppendArgs::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  term_ = value;
  // @@protoc_insertion_point(field_set:leo.RequestAppendArgs.term)
}

// required int32 leader_id = 2;
inline bool RequestAppendArgs::has_leader_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestAppendArgs::clear_leader_id() {
  leader_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestAppendArgs::leader_id() const {
  // @@protoc_insertion_point(field_get:leo.RequestAppendArgs.leader_id)
  return leader_id_;
}
inline void RequestAppendArgs::set_leader_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  leader_id_ = value;
  // @@protoc_insertion_point(field_set:leo.RequestAppendArgs.leader_id)
}

// required uint32 prev_log_index = 3;
inline bool RequestAppendArgs::has_prev_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestAppendArgs::clear_prev_log_index() {
  prev_log_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestAppendArgs::prev_log_index() const {
  // @@protoc_insertion_point(field_get:leo.RequestAppendArgs.prev_log_index)
  return prev_log_index_;
}
inline void RequestAppendArgs::set_prev_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  prev_log_index_ = value;
  // @@protoc_insertion_point(field_set:leo.RequestAppendArgs.prev_log_index)
}

// required uint32 prev_log_term = 4;
inline bool RequestAppendArgs::has_prev_log_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestAppendArgs::clear_prev_log_term() {
  prev_log_term_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestAppendArgs::prev_log_term() const {
  // @@protoc_insertion_point(field_get:leo.RequestAppendArgs.prev_log_term)
  return prev_log_term_;
}
inline void RequestAppendArgs::set_prev_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  prev_log_term_ = value;
  // @@protoc_insertion_point(field_set:leo.RequestAppendArgs.prev_log_term)
}

// required uint32 leader_commit = 5;
inline bool RequestAppendArgs::has_leader_commit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestAppendArgs::clear_leader_commit() {
  leader_commit_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestAppendArgs::leader_commit() const {
  // @@protoc_insertion_point(field_get:leo.RequestAppendArgs.leader_commit)
  return leader_commit_;
}
inline void RequestAppendArgs::set_leader_commit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  leader_commit_ = value;
  // @@protoc_insertion_point(field_set:leo.RequestAppendArgs.leader_commit)
}

// repeated .leo.LogEntry entries = 6;
inline int RequestAppendArgs::entries_size() const {
  return entries_.size();
}
inline void RequestAppendArgs::clear_entries() {
  entries_.Clear();
}
inline ::leo::LogEntry* RequestAppendArgs::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:leo.RequestAppendArgs.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::leo::LogEntry >*
RequestAppendArgs::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:leo.RequestAppendArgs.entries)
  return &entries_;
}
inline const ::leo::LogEntry& RequestAppendArgs::entries(int index) const {
  // @@protoc_insertion_point(field_get:leo.RequestAppendArgs.entries)
  return entries_.Get(index);
}
inline ::leo::LogEntry* RequestAppendArgs::add_entries() {
  // @@protoc_insertion_point(field_add:leo.RequestAppendArgs.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::leo::LogEntry >&
RequestAppendArgs::entries() const {
  // @@protoc_insertion_point(field_list:leo.RequestAppendArgs.entries)
  return entries_;
}

// -------------------------------------------------------------------

// RequestAppendReply

// required uint32 term = 1;
inline bool RequestAppendReply::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestAppendReply::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestAppendReply::term() const {
  // @@protoc_insertion_point(field_get:leo.RequestAppendReply.term)
  return term_;
}
inline void RequestAppendReply::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  term_ = value;
  // @@protoc_insertion_point(field_set:leo.RequestAppendReply.term)
}

// required bool success = 2;
inline bool RequestAppendReply::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestAppendReply::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RequestAppendReply::success() const {
  // @@protoc_insertion_point(field_get:leo.RequestAppendReply.success)
  return success_;
}
inline void RequestAppendReply::set_success(bool value) {
  _has_bits_[0] |= 0x00000002u;
  success_ = value;
  // @@protoc_insertion_point(field_set:leo.RequestAppendReply.success)
}

// -------------------------------------------------------------------

// KvCommnad

// required string operation = 1;
inline bool KvCommnad::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KvCommnad::clear_operation() {
  operation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KvCommnad::operation() const {
  // @@protoc_insertion_point(field_get:leo.KvCommnad.operation)
  return operation_.GetNoArena();
}
inline void KvCommnad::set_operation(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  operation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:leo.KvCommnad.operation)
}
inline void KvCommnad::set_operation(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  operation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:leo.KvCommnad.operation)
}
inline void KvCommnad::set_operation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  operation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:leo.KvCommnad.operation)
}
inline void KvCommnad::set_operation(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  operation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:leo.KvCommnad.operation)
}
inline std::string* KvCommnad::mutable_operation() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:leo.KvCommnad.operation)
  return operation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KvCommnad::release_operation() {
  // @@protoc_insertion_point(field_release:leo.KvCommnad.operation)
  if (!has_operation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return operation_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KvCommnad::set_allocated_operation(std::string* operation) {
  if (operation != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  operation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operation);
  // @@protoc_insertion_point(field_set_allocated:leo.KvCommnad.operation)
}

// required string key = 2;
inline bool KvCommnad::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KvCommnad::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KvCommnad::key() const {
  // @@protoc_insertion_point(field_get:leo.KvCommnad.key)
  return key_.GetNoArena();
}
inline void KvCommnad::set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:leo.KvCommnad.key)
}
inline void KvCommnad::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:leo.KvCommnad.key)
}
inline void KvCommnad::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:leo.KvCommnad.key)
}
inline void KvCommnad::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:leo.KvCommnad.key)
}
inline std::string* KvCommnad::mutable_key() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:leo.KvCommnad.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KvCommnad::release_key() {
  // @@protoc_insertion_point(field_release:leo.KvCommnad.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KvCommnad::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:leo.KvCommnad.key)
}

// optional string value = 3;
inline bool KvCommnad::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KvCommnad::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& KvCommnad::value() const {
  // @@protoc_insertion_point(field_get:leo.KvCommnad.value)
  return value_.GetNoArena();
}
inline void KvCommnad::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:leo.KvCommnad.value)
}
inline void KvCommnad::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:leo.KvCommnad.value)
}
inline void KvCommnad::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:leo.KvCommnad.value)
}
inline void KvCommnad::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:leo.KvCommnad.value)
}
inline std::string* KvCommnad::mutable_value() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:leo.KvCommnad.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KvCommnad::release_value() {
  // @@protoc_insertion_point(field_release:leo.KvCommnad.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KvCommnad::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:leo.KvCommnad.value)
}

// required int64 cid = 4;
inline bool KvCommnad::has_cid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KvCommnad::clear_cid() {
  cid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KvCommnad::cid() const {
  // @@protoc_insertion_point(field_get:leo.KvCommnad.cid)
  return cid_;
}
inline void KvCommnad::set_cid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  cid_ = value;
  // @@protoc_insertion_point(field_set:leo.KvCommnad.cid)
}

// required uint32 seq = 5;
inline bool KvCommnad::has_seq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KvCommnad::clear_seq() {
  seq_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KvCommnad::seq() const {
  // @@protoc_insertion_point(field_get:leo.KvCommnad.seq)
  return seq_;
}
inline void KvCommnad::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  seq_ = value;
  // @@protoc_insertion_point(field_set:leo.KvCommnad.seq)
}

// -------------------------------------------------------------------

// KvCommnadReply

// required bool leader = 1;
inline bool KvCommnadReply::has_leader() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KvCommnadReply::clear_leader() {
  leader_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool KvCommnadReply::leader() const {
  // @@protoc_insertion_point(field_get:leo.KvCommnadReply.leader)
  return leader_;
}
inline void KvCommnadReply::set_leader(bool value) {
  _has_bits_[0] |= 0x00000004u;
  leader_ = value;
  // @@protoc_insertion_point(field_set:leo.KvCommnadReply.leader)
}

// optional string error = 2;
inline bool KvCommnadReply::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KvCommnadReply::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KvCommnadReply::error() const {
  // @@protoc_insertion_point(field_get:leo.KvCommnadReply.error)
  return error_.GetNoArena();
}
inline void KvCommnadReply::set_error(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:leo.KvCommnadReply.error)
}
inline void KvCommnadReply::set_error(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:leo.KvCommnadReply.error)
}
inline void KvCommnadReply::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:leo.KvCommnadReply.error)
}
inline void KvCommnadReply::set_error(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:leo.KvCommnadReply.error)
}
inline std::string* KvCommnadReply::mutable_error() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:leo.KvCommnadReply.error)
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KvCommnadReply::release_error() {
  // @@protoc_insertion_point(field_release:leo.KvCommnadReply.error)
  if (!has_error()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return error_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KvCommnadReply::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:leo.KvCommnadReply.error)
}

// optional string value = 3;
inline bool KvCommnadReply::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KvCommnadReply::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KvCommnadReply::value() const {
  // @@protoc_insertion_point(field_get:leo.KvCommnadReply.value)
  return value_.GetNoArena();
}
inline void KvCommnadReply::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:leo.KvCommnadReply.value)
}
inline void KvCommnadReply::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:leo.KvCommnadReply.value)
}
inline void KvCommnadReply::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:leo.KvCommnadReply.value)
}
inline void KvCommnadReply::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:leo.KvCommnadReply.value)
}
inline std::string* KvCommnadReply::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:leo.KvCommnadReply.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KvCommnadReply::release_value() {
  // @@protoc_insertion_point(field_release:leo.KvCommnadReply.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KvCommnadReply::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:leo.KvCommnadReply.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace leo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_args_2eproto
